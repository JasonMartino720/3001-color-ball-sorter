% Camera Calibration Script
% Most of this script is generated, but a few things were modified to make it 
% nicer to run. For example, a DEBUG flag was added so the script will not
% generate figures unless absolutely needed!


if exist('DEBUG', 'var') ~= 1
    DEBUG = true;
end

% Define images to process
% Note: This WILL be different, make sure you replace these with your pictures before
imageFileNames = {'/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image1.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image2.png'...
     '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image2.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image4.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image5.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image6.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image7.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image8.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image9.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image10.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image10.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image12.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image13.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image14.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image15.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image16.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image17.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image18.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image19.png'...
    '/home/yongxiang/RBE3001_Matlab11/camera_calibration/Image20.png'...
};

% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

if DEBUG
    
    % View reprojection errors
    h1=figure; showReprojectionErrors(cameraParams);

    % Visualize pattern locations
    h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

    % Display parameter estimation errors
    displayErrors(estimationErrors, cameraParams);
    
end
